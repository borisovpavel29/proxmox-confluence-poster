stages:
  - build-image
  - deploy-image

build-image:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: $DOCKER_IMAGE
  stage: build-image
  image:
    name: $CI_REGISTRY/kaniko-project/executor:v1.18.0-debug
    entrypoint: [ "" ]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n "json_key:${CI_REGISTRY_KEY}" |
      base64 | tr -d '\n' )\"}}}" > /kaniko/.docker/config.json
    - sed -i "s|proxmox_url_value|$PROXMOX_URL|g" config.yml
    - sed -i "s|proxmox_token_id_value|$PROXMOX_TOKEN_ID|g" config.yml
    - sed -i "s|proxmox_token_secret_value|$PROXMOX_TOKEN_SECRET|g" config.yml
    - sed -i "s|confluence_url_value|$CONFLUENCE_URL|g" config.yml
    - sed -i "s|confluence_token_value|$CONFLUENCE_TOKEN|g" config.yml
    - sed -i "s|confluence_page_id_value|$CONFLUENCE_PAGE_ID|g" config.yml
  script:
    - /kaniko/executor
      --context "${KANIKO_BUILD_CONTEXT}"
      --dockerfile "${KANIKO_DOCKERFILE}"
      --destination "${KANIKO_DESTINATION_COMMIT}"
      --destination "${KANIKO_DESTINATION_LATEST}"
    - echo "Image - ${CI_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}"
  variables:
    DOCKER_IMAGE: pxe-parser
    DOCKER_TAG: $CI_COMMIT_SHORT_SHA
    KANIKO_BUILD_CONTEXT: ${CI_PROJECT_DIR}
    KANIKO_DOCKERFILE: ${CI_PROJECT_DIR}/Dockerfile
    KANIKO_DESTINATION_COMMIT: ${CI_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}
    KANIKO_DESTINATION_LATEST: ${CI_REGISTRY}/${DOCKER_IMAGE}:latest

deploy-image:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  stage: deploy-image
  tags:
    - internal
  script:
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST -p $PORT "mkdir -p /home/$USER/.docker"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n "json_key:${CI_REGISTRY_KEY}" | base64 | tr -d '\n' )\"}}}" > config.json
    - scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P $PORT "config.json" "$USER@$HOST:/home/$USER/.docker/config.json"
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST -p $PORT "docker rm $SERVICE_NAME -f"
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST -p $PORT "docker run --name $SERVICE_NAME --restart=always --pull=always -d ${CI_REGISTRY}/${DOCKER_IMAGE}:latest"
  variables:
    HOST: 10.10.2.183
    PORT: 22
    USER: svc_user
    SERVICE_NAME: pxe-parser
    DOCKER_IMAGE: pxe-parser